Import('env')

env = env.Clone()
env.Append(CCFLAGS = ['-w', '-include', 'mbed-overrides/stm32f303k8-bootloader/device.h'])
mbed_lib = env.MbedLikeLibrary(
    'mbed', 'mbed/hal/',
    ['api/', 'common/', 'hal/', 'targets/cmsis/', 'targets/hal/'],
    ignore_sources=[
      'targets/hal/TARGET_STM/TARGET_STM32F3/i2c_api.c',
    ],
    additional_sources=[
      'mbed-overrides/stm32f303k8-bootloader/i2c_api.c'
    ])
env.Prepend(LIBS = mbed_lib)

env.Append(LINKFLAGS=[
  '-Wl,--whole-archive',  # used to compile mbed HAL, which uses funky weak symbols
  mbed_lib,
  '-Wl,--no-whole-archive',
  '--specs=nosys.specs',
  '-Tmbed-overrides/stm32f303k8-bootloader/STM32F303X8.ld',
])

# Top-level build flow
env = env.Clone()
env['CCFLAGS'].remove('-w')
env.Append(CCFLAGS = ['-Werror', '-Wall'])

bootloader = env.Program(
  target = '../bootloader',
  source = Glob('*.cpp'),
)
env.Objcopy(bootloader)
env.Objdump(bootloader)
env.SymbolsSize(bootloader)
